/*!
	\page gol-tutorial.html tutorial
	
	\title Game of Life Tutorial
	
	\image intro_picture.png
	
	\chapter Introduction
	
		This tutorial is about the famous cellular automaton by John Conway - referred to as  \l {https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life}{Conway's Game of Life}.
		It will concentrate on implementing a basic version of this simulation but will also partly cover topics like \e {"multiple scenes"}, \e {organizing UI elements on the screen} and \e {entitiy communication}.
		
		\chapter New Project & the Basics
		
		Create a new Empty V-Play Project with the name \b {Game_Of_Life}. Inside the qml directory of your project, create the following new folders: \b {entities} & \b {scenes} (which we will need later).
		
		So lets talk briefly about the basic idea and facts of \e {Game of Life} (for more detailed infos, visit the link above).
		
		\list 1
			\li We want to show a two-dimensional board, consisting of cells (one per position row\column)
			\li A cell has a position on the board (row\column coordinate), has two possible states (dead or alive) and each state is displayed differently
			\li A cell changes its state depending on its current one and the ones of its surrounding neighbours (more on that later)
			\li The simulation happens in steps. Changes of cells happen only in between steps
			\li We want to define how many steps we want to simulate
			\li The board needs an initial setup of living/dead cells
		\endlist
		
		This already tells us that there are some settings to be adjusted before the actual simulation can start. Therefore it makes sense to start with how we want to split up the game buy using multiple scens.
	
	\chapter Multiple Scenes Setup
	
		\section1 The Base
		
			When having multiple versions of the same type, it is always a good idea to think about characteristics they all have in common. If there are enough, its worth creating a common base version.
			In our case we want to have two different scenes. One as the menu where we can define all the different settings for our simulation and a second one for the simulation itself.
			
			Lets start by adding a new scene under the \e {scenes} folder - namely \underline {SceneBase.qml}.
			
			\qml
				import VPlay 2.0
				import QtQuick 2.0

				// The base for our scenes
				Scene {
					id: sceneBase
					// The "logical size" - the scene content is auto-scaled to match the GameWindow size
					width: 320
					height: 480

					// By default, set the opacity to 0 - this will be changed from the Main.qml with PropertyChanges
					opacity: 0
					// We set the visible property to false if opacity is 0 because the renderer skips invisible items, this is an performance improvement
					visible: opacity > 0
					// If the scene is invisible, we disable it
					enabled: visible

					// Background
					Rectangle {
						anchors.fill: parent.gameWindowAnchorItem
						color: "#47688e"
					}
				}
			\endqml
			
			So what do we already see:
			
			\list
				\li width/height is common since we normally want all scens to have the same size
				\li opacity/visible/enabled all contribute to the behaviour we want when switching between scenes (details in comments)
				\li We have a rectangle as background, spanning the whole scene. This would also be possible with an image
			\endlist
			
		\section1 The Menu
		
			Now its time for the menu scene, which will not only be the place where we define the conditions for our simulation, but also the thing we see before and after a simulation. 
			Add again a new scene int \e {scenes} folder and name it \underline {MenuScene.qml}.
		
			\qml
				import VPlay 2.0
				import QtQuick 2.0

				// The Menu Scene
				SceneBase {
					id: menuScene

					// Headline with the name of the app
					Text {
						anchors.horizontalCenter: parent.horizontalCenter
						y: 30
						font.pixelSize: 30
						color: "#e9e9e9"
						text: "The Game of Life"
					}
				}
			\endqml
			
			Not yet much to see her but this will change soonish. First is to note that we do not use "Scene" for our type definition but instead our own defined type e\ {SceneBase} - which is important because else our base class would't make too much sense ;)
			Also note that we did not have to add an additonal import to be able to use our own type - this is due to it being in the same folder as this file. We will later see how it looks like to import something.
			Beside these things, we added a nice headline for our app, prominently spelling its name.
			
		\section1 The Game Scene
			
			The last scene we add is the one where our simulation will take place. Add it as before under \e {scenes} with the name \e {GameScene.qml}.
			
			\qml
				import VPlay 2.0
				import QtQuick 2.0

				// The Game Scene
				SceneBase {
					id: gameScene

					property bool simulationRunning: false

					sceneAlignmentY: "top"
					sceneAlignmentX: "left"

					// The entitiy  manager which will store all cells of our board
					EntityManager {
						 id: cellBoardEntityManager
						 entityContainer: gameScene
					}

				}
			\endqml
			
			Some new things here to mention. The bool property will be needed in the future to tell us if the simulation is still running. The EntitiyManager is not yet used but will be needed when we create our cells for the board.
			
		\section1 Bringing them together
			
			All basic scene versions are in place, so its time to put them to use. Also we can now define our \e {Main.qml} - which got auto created with new project.
			
			\qml
				import VPlay 2.0
				import QtQuick 2.0

				import "scenes"

				GameWindow {
					id: gameWindow

					screenWidth: 960
					screenHeight: 640

					property int setupLivingCells: 2
					property int setupSimulationSteps: 1
					property int currentSimulationStep: 0

					MenuScene {
						id: menuScene
					}

					GameScene {
						id: gameScene
					}
				}
			\endqml
			
			First thing to note is the additional import, so we have access to our defined scenes. In preperation we also added three integer properties:
			
			\list
				\li \e {setupLivingCells} represents the number of cells which got setup for the beginning of the simulation.
				\li \e {setupSimulationSteps} represents the number of simulation steps we want to perform
				\li \e {currentSimulationStep} is there to keep track of how many simulation steps we did.
			\endlist
			
			And last but not least, we have the definitions for our newly created scenes. 
			
		\section1 Controlling visibility
			
			So our scenes are in place but as for now, there is no activity possible. We want to switch between the scenes and for this we need the functionality itself and something to trigger it. 
			For the functionality, we already added some properties to the \e {SceneBase}, which we will put to use now. Add the following to your \e {Main.qml}:
			
			\qml
				...
				
				GameWindow {
					...
					
					// Default state is menu -> Default scene is menuScene
					state: "menu"
					activeScene: menuScene

					// State machine, takes care of reversing the PropertyChanges when changing the state
					states: [
						State {
							name: "menu"
							PropertyChanges {target: menuScene; opacity: 1}
							PropertyChanges {target: gameWindow; activeScene: menuScene}
						},
						State {
							name: "game"
							PropertyChanges {target: gameScene; opacity: 1}
							PropertyChanges {target: gameWindow; activeScene: gameScene}
						}
					]
				}
			\endqml
			
			The solution is to use StateMachine. The GameWindow has the property \e {state} which we set to \e {menu} because the menuScene is the place where we want to start. The following code defines what should happen on the specific state changes. It will be browsed through and do what is set up.
			This is on one hand, to change the opacity of the scene where we wanna go (which through the set up properties also implicitly changes \e {visible} and \e {enabled}). On the other hand we change the \e {activeScene} property to the one we want.
			
		\section1 One Button to rule them all
			
			Now that the functionality to switch scenes is in place, we need UI elements to trigger them. Since we will need several buttons (not only for switching), we should create a reusable one. Add a \e {MenuButton.qml} file to the \e {entities} folder, with the following content:
			
			\qml
				import QtQuick 2.0

				Rectangle {
					id: button

					// The horizontal margin from the Text element to the Rectangle at both the left and the right side
					property int paddingHorizontal: 10
					// The vertical margin from the Text element to the Rectangle at both the top and the bottom side
					property int paddingVertical: 5
					// access the text of the Text component
					property alias text: buttonText.text

					// this handler is called when the button is clicked.
					signal clicked

					// This will be the default size, it is same size as the contained text + some padding
					width: buttonText.width + paddingHorizontal * 2
					height: buttonText.height + paddingVertical * 2

					color: "#e9e9e9"

					// round edges
					radius: 10

					Text {
						id: buttonText
						anchors.centerIn: parent
						font.pixelSize: 18
						color: "black"
					}

					MouseArea {
						id: mouseArea
						anchors.fill: parent
						hoverEnabled: true
						onClicked: button.clicked()
						onPressed: button.opacity = 0.5
						onReleased: button.opacity = 1
					}
				}
			\endqml
			
			We need one button in the \e {menuScene} to switch to the \e {gameScene} and with it, a signal:
			
			\qml
				...

				import "../entities"

				SceneBase {
					id: menuScene

					// Signal indicating that the gameScene should be displayed and the simulation can start
					signal startSimulationPressed
					
					...
					
					// UI for setting up the simulation details
					Column {
						anchors.centerIn: parent
						spacing: 10
						MenuButton {
							text: "Start Simulation"
							onClicked: startSimulationPressed()
						}
					}
				}
			\endqml
			
			With this, we can extend our \e {menuScene} instance at \e {Main.qml}:
			
			\qml
				MenuScene {
					id: menuScene
					onStartSimulationPressed: doStartSimulationPressed();
				}
					
				function doStartSimulationPressed() {
					gameWindow.state = "game"
				}
			\endqml
			
			Be accessing the signal receiver, we can either do a single statement or call a function to do multiple things. \e {doStartSimulationPressed} will be extended in the future.
			If you run the game now, switching from menu to simulation is possible but we still need to provide a way to go the other way round. But instead of adding a new signal to \e {gameScene}, we will make use of the
			already per default existing one for back-buttons. Add this code to \e {GameScene.qml}:
			
			\qml
				// Back button to leave simulation
				 MenuButton {
					 anchors.right: gameScene.gameWindowAnchorItem.right
					 anchors.rightMargin: 10
					 anchors.bottom: gameScene.gameWindowAnchorItem.bottom
					 anchors.bottomMargin: 10
					 text: "Abort Simulation"
					 onClicked: backButtonPressed()
				}
			\endqml
			
			And extend our \e {gameScene} instance in \e {Main.qml}:
			
			\qml
				GameScene {
					id: gameScene
					onBackButtonPressed: doResetSimulation()
				}
				
				function doResetSimulation() {
					gameWindow.state = "menu"							gameScene.simulationRunning = false
					setupLivingCells = 2
					setupSimulationSteps = 1
					currentSimulationStep = 0
				}
			\endqml
			
			If you start the game now, you will see the menu and be able to switch to simulation and back. Great job!
			
			\table
				\row
					\image scene_switch_menu.png
					\image scene_switch_game.png
			\endtable
			
			
	\chapter Changing and showing settings
		
		\section1 A label to show
		
			Its time get our fingers on the settings we want to change and display for the simulation. The button functionality for the changes exists - whats missing is a label to show the settings.
			Therefore create a \e {MenuLabel.qml} in the \e {entities} folder with this content:
			
			\qml
				import QtQuick 2.0

				Rectangle {
					id: label

					// the horizontal margin from the Text element to the Rectangle at both the left and the right side.
					property int paddingHorizontal: 10
					// the vertical margin from the Text element to the Rectangle at both the top and the bottom side.
					property int paddingVertical: 5

					// access the text of the Text component
					property alias text: labelText.text
					property alias textColor: labelText.color

					// this will be the default size, it is the same size as the contained text + some padding
					width: labelText.width + paddingHorizontal * 2
					height: labelText.height + paddingVertical * 2

					color: "#47688e"

					// round edges
					radius: 10

					Text {
						id: labelText
						anchors.centerIn: parent
						font.pixelSize: 18
						color: "black"
					}
				}
			\endqml
		
		\section1 A nice menu
		
			With the new type at hand, we can finalize our \e {MenuScene.qml} by adding all the signals, correspondings buttons and labels we need:
			
			\qml
				import VPlay 2.0
				import QtQuick 2.0

				import "../entities"

				// The Menu Scene
				SceneBase {
					id: menuScene

					// Signal indicating that the gameScene should be displayed and the simulation can start
					signal startSimulationPressed
					// Signals to trigger an in-/decrease of living cells at the begin of the simulation
					signal increaseLivingCells
					signal decreaseLivingCells
					// Signals to trigger an in-/decrease of simulation steps to be performed
					signal increaseSimulationSteps
					signal decreaseSimulationSteps

					// Headline with the name of the app
					Text {
						anchors.horizontalCenter: parent.horizontalCenter
						y: 30
						font.pixelSize: 30
						color: "#e9e9e9"
						text: "The Game of Life"
					}

					// UI for setting up the simulation details
					Column {
						anchors.centerIn: parent
						spacing: 10
						MenuButton {
							text: "Start Simulation"
							onClicked: startSimulationPressed()
						}

						Row {
							MenuButton {
								text: "-"
								onClicked: decreaseLivingCells()
							}
							MenuLabel {
								text: setupLivingCells
							}
							MenuButton {
								text: "+"
								onClicked: increaseLivingCells()
							}
							MenuLabel {
								text: "Define number of living cells"
								color: "#47688e"
							}
						}
						Row {
							MenuButton {
								text: "-"
								onClicked: decreaseSimulationSteps()
							}
							MenuLabel {
								text: setupSimulationSteps
							}
							MenuButton {
								text: "+"
								onClicked: increaseSimulationSteps()
							}
							MenuLabel {
								text: "Define number of simulation steps"
								color: "#47688e"
							}
						}
					}
				}
			\endqml
		
			Each in-/decrease for cells and steps get a seperate signal and button. The labels got used to display the actual number and description of what happens.
			We also make of \e {Column} & \e {Row} to neatly organize all this elements on the screen.
			The next step is to create the handlers in \e {Main.qml}:
			
			\qml
				MenuScene {
					id: menuScene
					onStartSimulationPressed: doStartSimulationPressed();
					onIncreaseLivingCells: doIncreaseLivingCells();
					onDecreaseLivingCells: doDecreaseLivingCells();
					onIncreaseSimulationSteps: doIncreaseSimulationSteps();
					onDecreaseSimulationSteps: doDecreaseSimulationSteps();
				}
				
				function doIncreaseLivingCells() {
					if (setupLivingCells < gameScene.getNumberOfCells())
						++setupLivingCells;
				}

				function doDecreaseLivingCells() {
					if (setupLivingCells > 0)
						--setupLivingCells;
				}

				function doIncreaseSimulationSteps() {
					++setupSimulationSteps;
				}

				function doDecreaseSimulationSteps() {
					if (setupSimulationSteps > 1)
						--setupSimulationSteps;
				}
			\endqml
			
			The functions needed some checks for boundaries - like it should not be possible to setup more cells than the board can actually host.
			Starting the game now will present you with this beautiful menu:
			
			\image finished_menu.png
			
		\section1 UIs in the simulation
		
			Whats left regarding UIs, are the needed elements in the \e {GameScene.qml}:
			
			\qml
				// UI displaying infos about the current state
				Column {
					anchors.right: gameScene.gameWindowAnchorItem.right
					anchors.rightMargin: 10
					anchors.top: gameScene.gameWindowAnchorItem.top
					anchors.topMargin: 10

					Row {
						MenuLabel {
							text: "Current Simulation Round: " + currentSimulationStep
							paddingVertical: 10
						}
					}
					Row {
						 MenuLabel {
							 text: "Simulation finished!"
							 visible: !simulationRunning
							 textColor: "red"
						 }
					 }
				}
			\endqml
			
			Here too the column/row elements are handy. We show the current simulation step (so the user can keep track)and when the simulation stopped, a label indicating the finished state.
			
			\image finished_game_menu.png
		
	\chapter Its all about cells
		
		\section1 A single cell
	
			Congratulations! We sat up everything we need to be able to concentrate now on the core of our game - the cell simulation. Lets recap what we want from one of our cells:
			
			\list
				\li It should be able to be marked as dead or alive
				\li It needs to know its position on the board (by row/column number)
				\li Depending on the dead/alive state, it should be displayed accordingly
			\endlist
			
			With that knowledge we can add the new file \e {Cell.qml} to the \e {entities} folder:
			
			\qml
				import VPlay 2.0
				import QtQuick 2.0

				EntityBase {
					id: cell
					entityType: "Cell"

					property bool isAlive: false
					property int row
					property int column

					Image {
						id: cellImage
						anchors.fill: parent
						source: "../../assets/DeadCell.png"
					}

					function setIsAlive(isAliveFlag)
					{
						if (isAlive === isAliveFlag)
							return

						isAlive = isAliveFlag;

						if (isAlive == true)
							cellImage.source = "../../assets/LivingCell.png"
						else
							cellImage.source = "../../assets/DeadCell.png"
					}
				}
			\endqml
			
			\table
				\header
					\li Living Cell
					\li Dead Cell
				\row
					\li \inlineimage livingCell.png
					\li \inlineimage deadCell.png
			\endtable
			
			That was easy ;) The dead/alive state is realized with a bool property since it can have only two different states. \e {row, column} can be simple integer properties. An image will display the cell (strectching over the full size of it). And to be able to add some additional logic,
			changing the \e {isAlive} property works through a function. Here we not only check if a change is needed (and by this skipping the rest if not), but also update the image source depending on the new value of \e {isAlive}.
		
		\section1 The Cellboard
			
			The cellboard is the place where the simulation starts (using the set up values from the menu), does its steps and will show the end result. Again, we should recap what our cellboard should be capable of:
			
			\list
				\li It defines how many cells it can hold
				\li It must signal when the simulation if finished and clear up the created cells
				\li It must create all cells which are needed and define which of them will be marked \e {alive} at the beginning
				\li It must do the simulation steps and through them, execute the rules which decide how the next verson of the board looks
			\endlist
			
			That means quite some work, but lets start with the first two points.
			
			\section2 The Basic Layout
			
				Add a new file \e {CellBoard.qml} in the \e {entities} folder, with the following content:
				
				\qml
					import VPlay 2.0
					import QtQuick 2.0

					Item {
						id: cellBoard

						// The board will always be square, so just one value needed (defines one dimension)
						property int boardSize: 15
						property double cellSize
						property int columns: Math.floor(width / cellSize)
						property int rows: Math.floor(height / cellSize)

						// Arrays for handling the cells on the board
						property var board: []      // The board which is displayed
						property var nextBoard: []  // The where changes happen before they are applied to the display

		
						signal simulationOver

						// Shall be a multiple of the cellSize
						width: cellSize * boardSize
						height: cellSize * boardSize

						// Calculate cell index
						function index(row, column) {
							return row * columns + column
						}
					}
				\endqml
				
				We want a square board, so we need just one value which defines how many cells a row/column will have. \e {cellSize} needs to be defined by the one who creates an instance of this item. 
				You may wonder why we have two arrays withe "board" in their names. The simulation works (as already mentioned) in steps. A single step means a complete reculculation of the whole board 
				by using the given ruleset. This requires a current version (\e {board}) and a second one (e\ {nextBoard}), where changes are applied. After all calculations are finished, the current version is unchanged while 
				the other is the updated one. Since \e {board} is the one we use to display the cells, \e {nextBoard} is copied over it and therefore the display updated. We will see the code for this just in minute ;)
				
				You may again wonder, why our arrays are just one-dimensional - isn't the board to be supposed two-dimensional? A good point but don't worry , there is very neat solution in usage - 
				when can store the cells in an one-dimensional array (which is easier) and still use it two-dimensional. Adressing cells in the array works just as you would expect by their position 
				composed of row/column. Its just that you have to use the \e {index()} function to get the correct index for your coordinates - the calculation in there provides you with whats needed.
			
			\section2 Cell creation
			
				Its about time to create some cells for our board. Extend \e {CellBoard.qml} with the following code:
				
				
				\qml
					// Fill board with cells
					function initializeBoard(numberOfLivingCells) {
						clearBoard();

						// Fill board
						for(var y = 0; y < rows; y++)
						{
							for(var x = 0; x < columns ; x++)
							{
								board[index(y, x)] = createCell(y, x);
							}
						}

						// Randomly define which fields should be alive
						for (var i = 0; i < numberOfLivingCells; ++i)
						{
							board[getRandomDeadCellIndex()].setIsAlive(true);
						}
						// Handover the newly created board so both ones are identical for the start
						nextBoard = board
					}

					// Returns a random dead cell index
					function getRandomDeadCellIndex()
					{
						var randomDeadCellIndex;
						// Iterate until a random dead cell got found
						do
						{
							randomDeadCellIndex = getRandomInt(0, board.length);
						} while(board[randomDeadCellIndex].isAlilve === true)

						return randomDeadCellIndex;
					}

					// Returns random number between "min" (inclusive) and max (exclusive)
					function getRandomInt(min, max) {
						min = Math.ceil(min);
						max = Math.floor(max);
						return Math.floor(Math.random() * (max - min)) + min;
					}

					// Clear the board
					function clearBoard() {
						for(var i = 0; i < board.length; i++)   // Remove entities
						{
							var cell = board[i]
							if(cell !== null)
								cellBoardEntityManager.removeEntityById(nextBoardCell.entityId)

							var nextBoardCell = nextBoard[i]
							if (nextBoardCell !== null)
								cellBoardEntityManager.removeEntityById(nextBoardCell.entityId)
						}

						board = []
						nextBoard = []
					}

					// Create a new cell at specific position
					function createCell(row, column) {
						// Configure cell
						var entityProperties = {
							width: cellSize,
							height: cellSize,
							x: column * cellSize,
							y: row * cellSize,
							isAlive: false,
							row: row,
							column: column
						}

						// Create a new entitiy with our properties and return it
						var id = cellBoardEntityManager.createEntityFromUrlWithProperties(Qt.resolvedUrl("Cell.qml"), entityProperties)
						return cellBoardEntityManager.getEntityById(id)
					}
				\endqml
				
				Lets go over it function by function:
				
				\list
					\li \e {initializeBoard()} takes the number of cells that should be alive at start. After a cleaning, the whole board is iterated over and for each entry a cell is created.
						Afterwards the cells to be alive are decided per random position and both boards are aligned.
					\li \e {getRandomCellIndex()} & \e {getRandomInt()} are responsible for finding valild cells to be made alive.
					\li \e {clearBoard} removes the cell entities via the EntitiyManager and sets both boards to empty.
					\li \e {createCell} is responsible to create a single cell via the EntitiyManager and returns the EntitiyId for further use.
				\endlist
				
			\section2 The simulation
				
				Cells are created and in their place, so its time to simulate them away! Add the following code to \e {CellBoard.qml} and we will go through it:
				
				\qml
					// Works through a single full simulation step with all cell changes
					function doSimulationStep() {
						// Iterate over all cells to recalculate them
						for(var y = 0; y < rows; y++)
						{
							for(var x = 0; x < columns; x++)
							{
								calculateCell(y, x, getCellNeighbours(y, x))
							}
						}

						// Update the the displayed version
						board = nextBoard

						// The current simulation round is over so we increase to the next
						++currentSimulationStep

						// If we went through the desired number of simulationsteps, we stop
						if (currentSimulationStep == setupSimulationSteps)
							simulationRunning = false
					}

					// Returns an array with all neighbours for the cell on the given coordinates
					function getCellNeighbours(row, column)
					{
						var neighbourCells = []
						// Precalculate the different possiblites of where the given cell is located
						var isLeftUpperCorner = (column === leftBorder && row === upperBorder)
						var isRightUpperCorner = (column === rightBorder && row === upperBorder)
						var isLeftLowerCorner = (column === leftBorder && row === lowerBorder)
						var isRightLowerCorner = (column === rightBorder && row === lowerBorder)
						var isLeftBorder = column === leftBorder
						var isRightBorder = column === rightBorder
						var isUpperBorder = row === upperBorder
						var isLowerBorder = row === lowerBorder

						// Handle each case and depending on it, store the neighbouring cells
						if (isLeftUpperCorner) {
							neighbourCells[0] = board[index(row, column + 1)]          // Right Neighbour
							neighbourCells[1] = board[index(row + 1, column)]          // Lower Neighbour
							neighbourCells[2] = board[index(row + 1, column + 1)]      // Lower Right Neighbour
						}
						else if (isRightUpperCorner) {
							neighbourCells[0] = board[index(row, column - 1)]          // Left Neighbour
							neighbourCells[1] = board[index(row + 1, column)]          // Lower Neighbour
							neighbourCells[2] = board[index(row + 1, column - 1)]      // Lower Left Neighbour
						}
						else if (isLeftLowerCorner) {
							neighbourCells[0] = board[index(row, column + 1)]          // Right Neighbour
							neighbourCells[1] = board[index(row - 1, column)]          // Upper Neighbour
							neighbourCells[2] = board[index(row - 1, column + 1)]      // Upper Right Neighbour
						}
						else if (isRightLowerCorner) {
							neighbourCells[0] = board[index(row, column - 1)]          // Left Neighbour
							neighbourCells[1] = board[index(row - 1, column)]          // Upper Neighbour
							neighbourCells[2] = board[index(row - 1, column - 1)]      // Upper Left Neighbour
						}
						else if (isLeftBorder) {
							neighbourCells[0] = board[index(row, column + 1)]          // Right Neighbour
							neighbourCells[1] = board[index(row + 1, column)]          // Lower Neighbour
							neighbourCells[2] = board[index(row - 1, column)]          // Upper Neighbour
							neighbourCells[3] = board[index(row + 1, column + 1)]      // Lower Right Neighbour
							neighbourCells[4] = board[index(row - 1, column + 1)]      // Upper Right Neighbour
						}
						else if (isRightBorder) {
							neighbourCells[0] = board[index(row, column - 1)]          // Left Neighbour
							neighbourCells[1] = board[index(row + 1, column)]          // Lower Neighbour
							neighbourCells[2] = board[index(row - 1, column)]          // Upper Neighbour
							neighbourCells[3] = board[index(row + 1, column - 1)]      // Lower Left Neighbour
							neighbourCells[4] = board[index(row - 1, column - 1)]      // Upper Left Neighbour
						}
						else if (isUpperBorder) {
							neighbourCells[0] = board[index(row, column + 1)]          // Right Neighbour
							neighbourCells[1] = board[index(row, column - 1)]          // Left Neighbour
							neighbourCells[2] = board[index(row + 1, column)]          // Lower Neighbour
							neighbourCells[3] = board[index(row + 1, column + 1)]      // Lower Right Neighbour
							neighbourCells[4] = board[index(row + 1, column - 1)]      // Lower Left Neighbour

						}
						else if (isLowerBorder) {
							neighbourCells[0] = board[index(row, column + 1)]          // Right Neighbour
							neighbourCells[1] = board[index(row, column - 1)]          // Left Neighbour
							neighbourCells[2] = board[index(row - 1, column)]          // Upper Neighbour
							neighbourCells[3] = board[index(row - 1, column + 1)]      // Upper Right Neighbour
							neighbourCells[4] = board[index(row - 1, column - 1)]      // Upper Left Neighbour
						}
						else {
							neighbourCells[0] = board[index(row, column + 1)]          // Right Neighbour
							neighbourCells[1] = board[index(row, column - 1)]          // Left Neighbour
							neighbourCells[2] = board[index(row + 1, column)]          // Lower Neighbour
							neighbourCells[3] = board[index(row - 1, column)]          // Upper Neighbour
							neighbourCells[4] = board[index(row + 1, column + 1)]      // Lower Right Neighbour
							neighbourCells[5] = board[index(row - 1, column + 1)]      // Upper Right Neighbour
							neighbourCells[6] = board[index(row + 1, column - 1)]      // Lower Left Neighbour
							neighbourCells[7] = board[index(row - 1, column - 1)]      // Upper Left Neighbour
						}

						return neighbourCells
					}

					// Performs the actual change of cell, depending on its neighbours
					function calculateCell(row, column, cellNeighbours)
					{
						var livingNeighbours = 0
						for (var i = 0; i < cellNeighbours.length; ++i)
						{
							if (cellNeighbours[i].isAlive === true)
								++livingNeighbours
						}

						if (nextBoard[index(row, column)].isAlive === true)
							calculateLivingCell(livingNeighbours, row, column)
						else
							calculateDeadCell(livingNeighbours, row, column)
					}

					// Performs the changes for a living cell
					function calculateLivingCell(livingNeighbours, row, column)
					{
						if (livingNeighbours <= 1)
						{
							// Cell dies due to solitude
							nextBoard[index(row, column)].setIsAlive(false)
						}
						else if (livingNeighbours >= 4)
						{
							// Cell dies due to overpopulation
							nextBoard[index(row, column)].setIsAlive(false)
						}
					}

					// Performs the changes for a dead cell
					function calculateDeadCell(livingNeighbours, row, column)
					{
						if (livingNeighbours === 3)
						{
							// Cell comes to live due to the correct environment
							nextBoard[index(row, column)].setIsAlive(true)
						}
					}
				\endqml
				
				Uff thats quite some piece of code. But don't be frightened - this is mostly due to easy understable code. ;)
				
				\list
					\li \e {doSimulationStep()} 
					\li \e {getCellNeighbours()} 
					\li \e {calculateCell()}
					\li \e {calculateLivingCell()} & \e {calculateDeadCell()} 
				\endlist
				
	
	\chapter Using the CellBoard
		
*/